import * as SpotifyWebApi from 'spotify-web-api-js'

export class Spotify {
	private client: SpotifyWebApi.SpotifyWebApiJs;
	private profile: SpotifyApi.CurrentUsersProfileResponse;
	constructor(token: string) {
		this.client = new SpotifyWebApi();
		this.client.setAccessToken(token);
	}

	public searchArtists = async (artists: string[]): Promise<SpotifyApi.ArtistObjectFull[]> => {
		return await Promise.all(artists.map(async (a) => this.searchArtistByName(a)));
	}

	public getGenres = async (): Promise<string[]> => {
		return await this.getGenreList();
	}

	public getRecommendations = async (searchOptions: SpotifyApi.RecommendationsOptionsObject): Promise<SpotifyApi.RecommendationsFromSeedsResponse> => {
		return await this.client.getRecommendations(searchOptions);
	}

	public getUserProfile = async (): Promise<SpotifyApi.CurrentUsersProfileResponse> => {
		return await this.client.getMe()
	}

	public createPlaylistAndAddTracks = async(name: string, uris: string[]): Promise<SpotifyApi.CreatePlaylistResponse> => {
		if (!this.profile) {
			this.profile = await this.getUserProfile()
		}
		const opts =  {
			description: 'Generated by What Should I Listen to?',
			name,
			public: false
		}
		const playlist = await this.client.createPlaylist(this.profile.id, opts);
		await this.client.addTracksToPlaylist(this.profile.id, playlist.id, uris);
		return playlist;
	}

	private searchArtistByName = async (artist: string): Promise<SpotifyApi.ArtistObjectFull> => {
		const results = (await this.client.searchArtists(artist, {}))
		return results.artists.items[0];
	}
	private getGenreList = async (): Promise<string[]> => {
		return (await this.client.getAvailableGenreSeeds()).genres
	}

}