import SpotifyWebApi from 'spotify-web-api-js'

export class Spotify {
	private client: SpotifyWebApi.SpotifyWebApiJs;
	constructor(token: string) {
		this.client = new SpotifyWebApi();
		this.client.setAccessToken(token);
	}

	public searchArtists = async (artists: string[]): Promise<SpotifyApi.ArtistObjectFull[]> => {
		return await Promise.all(artists.map(async (a) => this.searchArtistByName(a)));
	}

	public getGenres = async (): Promise<string[]> => {
		return await this.getGenreList();
	}

	public getRecommendations = async (searchOptions: SpotifyApi.RecommendationsOptionsObject): Promise<SpotifyApi.RecommendationsFromSeedsResponse> => {
		return await this.client.getRecommendations(searchOptions);
	}

	public createPlaylistAndAddTracks = async(name: string, uris: string[]): Promise<SpotifyApi.CreatePlaylistResponse> => {
		const opts =  {
			description: 'Generated by What Should I Listen to?',
			name,
			public: false
		}
		const playlist = await this.client.createPlaylist(opts);
		await this.client.addTracksToPlaylist(playlist.id, uris);
		return playlist;
	}

	public async call<T1, T2>(func: (p: T2) => T1 , params: T2, errorHandler: (err: any) => never, errorMessage?: string): Promise<T1>
	public async call<T1, T2, T3>(func: (p: T2, p1: T3) => T1 , params: T2, errorHandler: (err: any) => never, params2: T3, errorMessage?: string): Promise<T1>
	public async call<T1, T2, T3>(func: (p: T2, p1: T3) => T1 , params: T2, errorHandler: (err: any) => never, params2: T3, errorMessage?: string): Promise<T1> {
		const genericMessage = 'an error occurred';
		try {
			return await func(params, params2)
	 } catch (e) {
		 // tslint:disable-next-line:no-console
		 console.log(`error calling ${func}: ${errorMessage || genericMessage}`);
		 return errorHandler(e);
	 }
	}

	private searchArtistByName = async (artist: string): Promise<SpotifyApi.ArtistObjectFull> => {
		const results = (await this.client.searchArtists(artist, {}))
		return results.artists.items[0];
	}
	private getGenreList = async (): Promise<string[]> => {
		return (await this.client.getAvailableGenreSeeds()).genres
	}

}